TLDR (TOO LONG, DIDN'T READ):
4 main paths:
1.	http://localhost:5207/courses
2.	http://localhost:5207/students
3.	http://localhost:5207/instructors
4.	http://localhost:5207/admin


Add or Delete student to/from course:
    PUT/DELETE: http://localhost:5207/students/id/courses/unique_course_id

Change grade:
    PUT: http://localhost:5207/students/id/courses/unique_course_id/grades/new_Grade


Add or Delete instructor to/from course:
    PUT/DELETE: http://localhost:5207/instructors


Note:
1.  Courses are assigned both a numeric id and a unique 5 character string id
2.  When adding or dropping a course for an instructor/student, the course is automatically updated. Class size is also automatically updated
3.  The program will check if an account username exists. If so, it will prompt you to choose a different username


There are 4 paths:
1.	http://localhost:5207/courses
2.	http://localhost:5207/students
3.	http://localhost:5207/instructors
4.	http://localhost:5207/admin

########################################################
When creating a course:

A course has a regular id which is numbered (Ex: id: 1, 2, 3, 4, ...) and has a unique_id which is
a randomly generated 5 character string (Ex: "z2heg").

POST: http://localhost:5207/courses
Request:
{
	“course_id”: “string” (max: 10 characters),
	“course_name”: “string” (max: 100 characters),
    "subject": "string" (max: 50 characters),
    "dates": [0 ,0 ,0 ,0 ,0] (array from monday through friday. 0 represents false, 1 represents true. Ex: [1, 0, 1, 0, 0] = Monday, Wednesday),
    "time": "string" (max: 50 characters)
    "capacity": "Integer"
    "description": "string" (max: 500 characters)
}

EXAMPLE:
{
	“course_id”: "CSE108",
	“course_name”: “Full Stack Web Development",
    "subject": "Computer Science and Engineering",
    "dates": [0, 1, 0, 1, 0],
    "time": "5:00PM-7:15PM",
    "capacity": 150,
    "description": "How to build websites"
}

Other methods:

GET: http://localhost:5207/courses
PUT: http://localhost:5207/courses/id
DELETE: http://localhost:5207/courses/id

##########################################################
When creating a student:

A student is assigned an id upon creation (Ex: id: 1, 2, 3, 4, ...)

POST: http://localhost:5207/students
Request:
{
    "username": "string" (max: 50 characters),
    "password": "string" (max: 50 characters),
    "first_name": "string" (max: 50 characters),
    "last_name": "string" (max: 50 characters)
}

EXAMPLE:
{
    "username": "MrIncredible",
    "password": "test1234",
    "first_name": "Bob",
    "last_name": "Incredible"
}

GET: http://localhost:5207/students
{
    "id": 1,
    "username": "MrIncredible",
    "password": "test1234",
    "first_name": "Bob",
    "last_name": "Incredible"
    "status": "STUDT",
    "registered_course": {"unique_id": 90}
}

Note: Only "username" and "password" can be changed
Note: "username" must be unique. The program will check if the same username exists

Other methods:
PUT: http://localhost:5207/students/id
DELETE: http://localhost:5207/students/id

Add a course to student: PUT: http://localhost:5207/students/id/courses/unique_course_id
"unique_course_id" is the "unique_id" generated by course

Delete a course from student: DELETE: http://localhost:5207/students/id/courses/unique_course_id
"unique_course_id" is the "unique_id" generated by course

Change student course grade: PUT: http://localhost:5207/students/id/courses/unique_course_id/grades/GRADE
GRADE is an integer


##########################################################
When creating an instructor

POST: http://localhost:5207/instructors
Request:
{
    "username": "string" (max: 50 characters),
    "password": "string" (max: 50 characters),
    "first_name": "string" (max: 50 characters),
    "last_name": "string" (max: 50 characters)
}

GET: http://localhost:5207/instructors
{
    "id": 1,
    "username": "MrIncredible",
    "password": "test1234",
    "first_name": "Bob",
    "last_name": "Incredible"
    "status": "TEACH",
    "assigned_courses": []
}

Note: Only "username" and "password" can be changed
Note: "username" must be unique. The program will check if the same username exists

Other methods:
PUT: http://localhost:5207/instructors/id
DELETE: http://localhost:5207/instructors/id

Add instructor to course: PUT: http://localhost:5207/instructors/id/courses/unique_course_id
"unique_course_id" is the "unique_id" generated by course

Remove instructor from course: DELETE: http://localhost:5207/instructors/id/courses/unique_course_id
"unique_course_id" is the "unique_id" generated by course

Note: The course database information automatically updates
Note: You can only add one instructor to course

##########################################################

When creating an admin

POST: http://localhost:5207/admin
Request:
{
    "username": "string" (max: 50 characters),
    "password": "string" (max: 50 characters),
    "first_name": "string" (max: 50 characters),
    "last_name": "string" (max: 50 characters)
}

GET: http://localhost:5207/instructors
{
    "id": 1,
    "username": "MrIncredible",
    "password": "test1234",
    "first_name": "Bob",
    "last_name": "Incredible"
    "status": "ADMIN",
}

Note: Only "username" and "password" can be changed
Note: "username" must be unique. The program will check if the same username exists

Other methods:
PUT: http://localhost:5207/admin/id
DELETE: http://localhost:5207/admin/id
